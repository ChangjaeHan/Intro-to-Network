"""Name: Changjae HanDate: Dec 11 2023Email: chan82@wisc.educslogin: changjaeFile: trace.py"""import selectimport socketimport structimport argparse"""printShortest()    1. print the shortest path from source to dest node    2. Increment TTL by 1 each time until trace packet reaches the dest"""def printShortest(trace_socket, trace_ip_port, src_ip, src_port, dest_ip, dest_port, debug_option):        trace_ip, trace_port = trace_ip_port        TTL = 0    start_ip = trace_ip    start_port = trace_port    end_ip = dest_ip    end_port = dest_port    while True:                header = struct.pack("!cI4sH4sH", b'T', TTL, socket.inet_aton(start_ip), start_port, socket.inet_aton(end_ip), end_port)         payload = ""        packet = header + payload.encode()        trace_socket.sendto(packet, (src_ip, src_port))                while True:                        readable, _, _ = select.select([trace_socket], [], [], 0)            if trace_socket in readable:                try:                    received_packet,(ip,port) = trace_socket.recvfrom(1024)                except socket.error:                    continue                                header = received_packet[:17]                payload = received_packet[17:].decode()                                packet_type, ttl, source_ip, source_port, destination_ip, destination_port = struct.unpack("!cI4sH4sH",header)                                 if debug_option: #when debug option is activated                    print("ttl: ", ttl)                    print("source ip is: ", socket.inet_ntoa(source_ip))                    print("source port is: ", source_port)                    print("dest ip is: ", socket.inet_ntoa(destination_ip))                    print("dest port is: ", dest_port)                                #If packet reaches the destination                if (socket.inet_ntoa(source_ip) == dest_ip) and (source_port == dest_port):                    output = payload.split(",")                    hop = 1                    hop_num= len(output)/2                    print("Hop#  IP  Port")                    while hop <= hop_num:                                                print(hop, " ", output[0], " ", output[1])                        del output[0:2]                        hop = hop + 1                                        exit(0) #Terminate                else:                    TTL = TTL+1                                    breakdef main():    parser = argparse.ArgumentParser(description="tracer data")    parser.add_argument('-a', type=int, metavar='routetrace port', help= 'routetrace port num')    parser.add_argument('-b', metavar='source hostname', help= 'source hostname')    parser.add_argument('-c', type=int, metavar='source port', help= 'source port')    parser.add_argument('-d', metavar='destination hostname', help= 'destination hostname')    parser.add_argument('-e', type=int, metavar='destination port', help= 'destination port')    parser.add_argument('-f', type=int, metavar='debug option', help= '1->activate debug option')    args = parser.parse_args()        try:        trace_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)    except:        print("Socket Error")        this_host = socket.gethostname()    this_ip_addr = socket.gethostbyname(this_host)    this_port = args.a    this_ip_port = (this_ip_addr, this_port)    trace_socket.bind(this_ip_port)        trace_socket.setblocking(0)        source_ip = socket.gethostbyname(args.b)     source_port = args.c    dest_ip = socket.gethostbyname(args.d)    dest_port = args.e            printShortest(trace_socket, this_ip_port, source_ip, source_port, dest_ip, dest_port, args.f)if __name__ == "__main__":    main()