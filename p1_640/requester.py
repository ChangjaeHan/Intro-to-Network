"""Name: Changjae HanDate: Oct 17 2023Email: chan82@wisc.educslogin: changjaeFile: requester.py"""import socketimport structimport argparseimport datetime as dtimport time"""Request_data    1. Create the requester and the sender socket    2. Pack the packet    3. Send it to the sender"""def request_data(req_port, file_option, row, is_first):    #Create a requester socket for UDP transmission    requester_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)    requester_ip_addr = socket.gethostbyname(socket.gethostname())    requester_addr_port = (requester_ip_addr, req_port)    #Bind the socket to the requester's address    requester_socket.bind(requester_addr_port)        #Create a sender socket for UDP transmission    sender_ip_addr = socket.gethostbyname(socket.gethostname())    sender_addr_port = (sender_ip_addr, int(row[3]))    #Create packet header      header_info = struct.pack("!cII", b'R', 0, 0)    #Combine packet header with payload    packet = header_info + row[0].encode()    #Send the request packet to the sender    requester_socket.sendto(packet, sender_addr_port)        #Processing received data    process_data(file_option, is_first, requester_socket)                """Process_data    1. Process the received data by unpacking    2. Calculate time and bytes    3. Write the data to the file"""def process_data(file_option, is_first, requester_socket):        sum_bytes = 0    sum_packets = 0    ptype = {b'D':"DATA", b'E':"END"}        #Check if it's first data    if is_first:        file = open(file_option, "w")    else:         file = open(file_option, "a")            #When the requester gets data from the sender    while True:        check_time = time.time()        received_packet, (sender_ip, sender_port) = requester_socket.recvfrom(1024)        wait_time = time.time()        packet_time = round(wait_time - check_time)                #Classify header and payload        received_header = received_packet[:9]        received_payload = received_packet[9:]        unpacked_header = struct.unpack("!cII", received_header)                #Print out packet information received         print(ptype[unpacked_header[0]] + " Packet")        print("recv time:  ", dt.datetime.now(), sep='')        print("sender addr:  ", sender_ip, ":", sender_port, sep='')        print("sequence:  ", socket.ntohl(unpacked_header[1]))        print("length:  ", unpacked_header[2])                sum_bytes += unpacked_header[2]                #If packet type is DATA        if unpacked_header[0] == b'D':            print("payload:  " + str(received_payload[0:4].decode()))            print("")            sum_packets += 1            file.write(received_payload.decode())        else:#END            print("payload:  0")            print("")            print("Summary")            print("sender addr:  ", sender_ip, ":", sender_port, sep='')            print("Total Data packets:  ", sum_packets, sep='')            print("Total Data bytes:  ", sum_bytes, sep='')            print("Average packets/second:  ", packet_time, sep='')            break            file.close()def main():    parser = argparse.ArgumentParser(description="requester data")    parser.add_argument('-p', type=int, metavar='port', help= 'requester port num')    parser.add_argument('-o', metavar='file_option', help = 'filename')    args = parser.parse_args()    is_first = True        tracker_file = open("tracker.txt", "r")        #Tracket_list to handle the order and unrelavant files    tracker_list = []    while True:        cur_line = tracker_file.readline()        if not cur_line: break        each_data = cur_line.split(" ")        each_data[-1] = each_data[-1].strip() #Remove each space in the end of cur_line        tracker_list.append(each_data)            #Sorted by num not to find the order over the list    tracker_list = sorted(tracker_list, key=lambda t: t[1])    print("Requester's print information")    print("-----------------------------------------------------------------------------")            for row in tracker_list:        if row[0] == args.o:#if it is requested file            startTime = time.perf_counter()            request_data(args.p, args.o, row, is_first)            endTime = time.perf_counter()            print("Duration of the test:  ", round((endTime-startTime)*1000), " ms", sep='')            print("")            is_first = False     print("")    print("-----------------------------------------------------------------------------")    print("In addition, a file ", args.o, " will be generated in the directory requester/.", sep='')     print("The content should be:")    print("")        with open(args.o, encoding="UTF8") as data :        contents = data.read()        print(contents)        print("")    print("-----------------------")        if __name__ == "__main__":    main()