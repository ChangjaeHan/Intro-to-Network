"""Name: Changjae HanDate: Oct 17 2023Email: chan82@wisc.educslogin: changjaeFile: sender.py"""import argparseimport socketimport osimport structimport datetime as dtimport time"""Read_data    1. Create the sender socket    2. Read requested data by unpacking    3. Pass on to send_data"""def read_data(send_port, req_port, rate, seq_no, length):        #Create a sender socket for UDP transmission    sender_socket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)    sender_ip_addr = socket.gethostbyname(socket.gethostname())    sender_addr_port = (sender_ip_addr, send_port)    #Bind the socket to the sender's address    sender_socket.bind(sender_addr_port)    print("UDP server is waiting for messages..")                #When the sender gets the request from the requester    while True:                data_received, requester_ip_addr = sender_socket.recvfrom(1024)        if not data_received: break #if requester disconnected         #Classify header and filename        header = data_received[:9]        decoded_header = struct.unpack("!cII", header)        filename = data_received[9:]                #If it is the requested packet        if decoded_header[0] == b'R':             send_data(filename, rate, seq_no, length, requester_ip_addr, sender_socket)    """Send_data    1. Open file and send DATA packet to the requester    2. Also send the END packet to the requester after sending all packets"""def send_data(filename, rate, seq_no, length, requester_ip_addr, sender_socket):        requester_ip, requester_port = requester_ip_addr        print("-----------------------------------------------------------------------------")    print("sender's print information:")        #Read file     try:        file = open(filename, "r")        file_size = os.path.getsize(filename)    #Fail to read file    except FileNotFoundError:        print("It doesn't contain such a file")        pass    #Succeed to read file, send the data to the requester    else:        while (file_size > 0): #Decided by max_length, may not send the data all at once            if file_size > length:                data_length = length            else:                data_length = file_size            payload = file.read(data_length)            file_size -= length                        #Pack and send the DATA packet to the requester            data_header = struct.pack("!cII", b'D', socket.htonl(seq_no), data_length)            packet = data_header + payload.encode()            sender_socket.sendto(packet, requester_ip_addr)                        print("DATA Packet")            print("send time:  ", dt.datetime.now(), sep='')            print("requester addr:  ", requester_ip, ":", requester_port, sep='')            print("Sequence num:  ", seq_no, sep='')            print("length:  ", data_length, sep='')            print("payload:  " + payload[0:4])            print("")                   seq_no += data_length            time.sleep(1/rate) #Time delay by rate        file.close()    #Once it is done sending all data, send END packet to the requester    end_header = struct.pack("!cII", b'E', socket.htonl(seq_no), 0)    sender_socket.sendto(end_header, requester_ip_addr)        print("END Packet")    print("send time:  ", dt.datetime.now(), sep='')    print("requester addr:  ", requester_ip, ":", requester_port, sep='')    print("Sequence num:  ", seq_no, sep='')    print("length:  0")    print("payload:  ")    print("")    print("")        def main():        parser = argparse.ArgumentParser(description="sender data")    parser.add_argument('-p', type=int, metavar='port', help = 'sender port num')    parser.add_argument('-g', type=int, metavar='requester_port', help = 'requester port num')    parser.add_argument('-r', type=int, metavar='rate', help = 'packet rate per second')    parser.add_argument('-q', type=int, metavar='seq_no', help = 'sequence number')    parser.add_argument('-l', type=int, metavar='length', help = 'length of payload')    args = parser.parse_args()    read_data(args.p, args.g, args.r, args.q, args.l)if __name__ == "__main__":	main()